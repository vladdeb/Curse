unit Algs;

interface

uses
  Maps;

function ValidAud(const Aud: String): boolean;

function SearhAud(Uni: TUni; const Aud: String): TUniPos;

implementation

function ValidAud(const Aud: String): boolean;
var
  DashPos, n, ind, temp1, temp2: integer;
begin
  result := true;
  n := Length(Aud);
  if Aud[n - 1] <> '-' then
  begin
    result := False;
    Exit;
  end;
  if (Aud[n] < '0') or (Aud[n] > '9') then
  begin
    Exit;
  end;
  ind := n - 2;
  if (ind > 0) and (Aud[ind] < '0') or (Aud[ind] > '9') then
    Dec(ind);
  if (ind > 0) then
  begin
    val(Copy(Aud, 1, ind), temp1, temp2);
    if temp2 <> 0 then
    begin
      result := False;
      Exit;
    end;
  end;
end;

function SearhAud(Uni: TUni; const Aud: String): TUniPos;

begin
  result.Building := Ord(Aud[length(Aud)]) - Ord('0');
  result.Floor := Ord(Aud[1]) - Ord('0');


end;

end.
